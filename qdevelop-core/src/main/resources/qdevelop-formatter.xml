<?xml version="1.0" encoding="UTF-8"?>
<data-formatter>

 	<param-formatter name="param-parametter" class="cn.qdevelop.core.formatter.impl.ParamFormatter">		
	</param-formatter>
	
	<!-- 根据条件，查询数据表中一条记录中的某些字段数据值，作为参数去请求其他操作 -->
	<param-formatter name="query-data-parametter" class="cn.qdevelop.core.formatter.impl.QueryDataParametter">	
		<index>需要请求数据的index索引</index>
		<columns>需要将数据记录中哪些字段作为参数使用，支持as用法</columns>
		<where-key>当前请求中哪些参数作为条件请求</where-key>	
	</param-formatter>
	
	<!-- 对数值参数加密存储，例手机号，身份证，银行卡号等敏感信息 -->
	<param-formatter name="encrypt-num-parametter" class="cn.qdevelop.core.formatter.impl.EncryptNumberParametter">	
		<param-key>需要加密的参数key</param-key>	
	</param-formatter>
	
	<!-- 对数值加密数值进行解密，例手机号，身份证，银行卡号等敏感信息 -->
	<result-formatter name="decrypt-num-formatter" class="cn.qdevelop.core.formatter.impl.DecryptNumberFormatter">
		<result-key>需要解密的结果集字段名</result-key>
	</result-formatter>
	
	
	<!--  -->
	<param-formatter name="extra-json-parametter" class="cn.qdevelop.core.formatter.impl.ExtraJsonParametter">	
		<extra-key>需要将其他的参数变成的参数名</extra-key>	
	</param-formatter>
	
	<result-formatter name="extra-json-formatter" class="cn.qdevelop.core.formatter.impl.ExtraJsonFormatter">
		<result-key>存放json扩展字段的名字</result-key>
	</result-formatter>
	
	<!--【AOP机制】基于查询结果的结果集处理-->
	<!--利用已配置sql模版，进行结果集关联操作，类似leftjoin功能，可轻易实现夸库查询-->
	<result-formatter name="key-value-formatter" class="cn.qdevelop.core.formatter.impl.KeyValueFormatter">
		<result-key>当前结果集字段名</result-key>
		<format-index>formatter的sql配置</format-index>
		<format-key>formatter结果集中的对应的字段名</format-key>
 		<format-columns>formatter结果集中的对应的字段名</format-columns>
	</result-formatter>
	
	<!--实现递归找父类结果-->
	<result-formatter name="closest-root-formatter" class="cn.qdevelop.core.formatter.impl.ClosestRootFormatter">
		<parent-key>当前结果集中父ID的列名</parent-key>
		<on-key>主键key</on-key>
		<column-key>取父结果的列名</column-key>
<!-- 	<split>多级的分割</split>-->
<!-- 	<deep-max>往上递归多少级</deep-max>-->
 	</result-formatter>
	
	<!--利用已配置sql模版，进行结果集关联操作，类似leftjoin功能，可轻易实现夸库查询-->
	<result-formatter name="left-join-formatter" class="cn.qdevelop.core.formatter.impl.LeftJoinFormatter">
		<result-key>当前结果集字段名</result-key>
		<left-join>sqlConfig中定义的其他结果集index</left-join>
		<on-key>结果集中的对应关联的字段名</on-key>
	 	<columns>获取结果集中的对应的字段名</columns>
	</result-formatter>
	
	<!--利用已配置sql模版，进行结果集一对多关联查询操作，类似leftjoin功能，可轻易实现夸库查询-->
	<result-formatter name="left-join-multi-formatter" class="cn.qdevelop.core.formatter.impl.LeftJoinMultiFormatter">
		<result-key>当前结果集字段名</result-key>
		<left-join>sqlConfig中定义的其他结果集index</left-join>
		<on-key>结果集中的对应关联的字段名</on-key>
	 	<columns>获取结果集中的对应的字段名</columns>
	 	<!-- <node-name>节点名称，非必填，defalut：child</node-name> -->
	</result-formatter>
	
	<!--利用properties配置，数据进行字典对应翻译关系-->
	<result-formatter name="prop-formatter" class="cn.qdevelop.core.formatter.impl.PropTranFormatter">
		<result-key>当前结果集字段名</result-key>
		<prop-key>配置文件中的名称</prop-key>
	</result-formatter>
	
	<!--日期类型的数据进行格式化，详见java中SimpleDateFormat的日期格式化配置方式 -->
	<result-formatter name="date-formatter" class="cn.qdevelop.core.formatter.impl.DateStyleFormatter">
		<result-key>当前结果集字段名</result-key>
		<date-style>配置文件中的名称</date-style>
	</result-formatter>
	
	<!--【AOP机制】基于数据库更新的执行过程控制-->
	
	<!-- 执行批次更新时，进行debug跟踪 -->
	<update-hook name="exec-debug-hook" class="cn.qdevelop.core.formatter.impl.SQLDebugHook"/>	
	<update-hook name="check-update-hook" class="cn.qdevelop.core.formatter.impl.CheckUpdateHook">
		<check-sql>检查数据结果集sql语句</check-sql>
		<check-arg>需要检查的参数key值</check-arg>
		<check-exsit>检查是否存在（true|false）</check-exsit>
	</update-hook>
	
</data-formatter>